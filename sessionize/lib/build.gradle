apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'com.squareup.sqldelight'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.0.0"

    implementation 'androidx.appcompat:appcompat:1.0.0'
}

kotlin {
    targets {
//        fromPreset(presets.android, 'android')

        def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
            compilations.each {
                it.extraOpts("-linkerOpts", "-lsqlite3")
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                implementation deps.stately.mpp
                implementation deps.kotlin.stdlib.common
                implementation deps.sqldelight.runtime
                implementation deps.knarch.threadsLivedata
                implementation deps.sqldelight.runtime
                implementation deps.multiplatformSettings.common
                implementation deps.timber.common
            }
        }

        commonTest {
            dependencies {
                implementation deps.kotlin.test.common
                implementation deps.kotlin.test.annotations
            }
        }

        iosMain {
            dependencies {
                implementation deps.sqldelight.driverIos
                implementation deps.sqliter.ios
                implementation deps.knarch.threadsLivedataNative
                implementation deps.multiplatformSettings.ios
                implementation deps.timber.ios
            }
        }

        /*androidMain {
            dependencies {
                implementation deps.kotlin.coroutines.jdk
                implementation deps.kotlin.coroutines.android
//                implementation deps.sqldelight.runtimeJdk
                implementation deps.sqldelight.driverAndroid
                implementation deps.knarch.threadsLivedataAndroid
                implementation deps.multiplatformSettings.android
                implementation deps.timber.android
            }
        }*/
    }
}

sqldelight {
    packageName = "co.touchlab.droidcon.db"
}

//tasks.preBuild.dependsOn("generateSqlDelightInterface")

//noinspection GroovyAssignabilityCheck
task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = System.getenv('CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

tasks.build.dependsOn packForXCode
